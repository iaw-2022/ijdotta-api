generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model appointment_patterns {
  id                   BigInt         @id @default(autoincrement())
  doctor_id            BigInt
  initial_date         DateTime       @db.Date
  end_date             DateTime       @db.Date
  initial_time         DateTime       @db.Time(0)
  end_time             DateTime       @db.Time(0)
  appointment_duration DateTime       @db.Time(0)
  days                 Json           @db.Json
  created_at           DateTime?      @db.Timestamp(0)
  updated_at           DateTime?      @db.Timestamp(0)
  doctors              doctors        @relation(fields: [doctor_id], references: [id], onDelete: Cascade, map: "appointment_patterns_doctor_id_foreign")
  appointments         appointments[]
}

model appointments {
  id                     BigInt               @id @default(autoincrement())
  appointment_pattern_id BigInt               @default(0)
  doctor_id              BigInt
  patient_id             BigInt?
  date                   DateTime             @db.Date
  initial_time           DateTime             @db.Time(0)
  end_time               DateTime             @db.Time(0)
  created_at             DateTime?            @db.Timestamp(0)
  updated_at             DateTime?            @db.Timestamp(0)
  appointment_patterns   appointment_patterns @relation(fields: [appointment_pattern_id], references: [id], onDelete: Cascade, map: "appointments_appointment_pattern_id_foreign")
  doctors                doctors              @relation(fields: [doctor_id], references: [id], onDelete: Cascade, map: "appointments_doctor_id_foreign")
  patients               patients?            @relation(fields: [patient_id], references: [id], onDelete: Cascade, map: "appointments_patient_id_foreign")
}

model doctors {
  id                   BigInt                 @id @default(autoincrement())
  user_id              BigInt
  name                 String                 @db.VarChar(255)
  lastname             String                 @db.VarChar(255)
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  appointment_patterns appointment_patterns[]
  appointments         appointments[]
  stories              stories[]
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement())
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String
  queue      String
  payload    String
  exception  String
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model migrations {
  id        Int    @id @default(autoincrement())
  migration String @db.VarChar(255)
  batch     Int
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model password_resets {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model patients {
  id                       BigInt         @id @default(autoincrement())
  name                     String         @db.VarChar(255)
  lastname                 String         @db.VarChar(255)
  email                    String         @unique(map: "patients_email_unique") @db.VarChar(255)
  health_insurance_company String?        @db.VarChar(255)
  health_insurance_id      String?        @db.VarChar(255)
  created_at               DateTime?      @db.Timestamp(0)
  updated_at               DateTime?      @db.Timestamp(0)
  appointments             appointments[]
  stories                  stories[]
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement())
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?
  last_used_at   DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model roles {
  id         BigInt    @id @default(autoincrement())
  role       String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  users      users[]
}

model stories {
  id          BigInt       @id @default(autoincrement())
  patient_id  BigInt
  doctor_id   BigInt
  date        DateTime     @db.Date
  description String
  created_at  DateTime?    @db.Timestamp(0)
  updated_at  DateTime?    @db.Timestamp(0)
  doctors     doctors      @relation(fields: [doctor_id], references: [id], map: "stories_doctor_id_foreign")
  patients    patients     @relation(fields: [patient_id], references: [id], onDelete: Cascade, map: "stories_patient_id_foreign")
  treatments  treatments[]
}

model treatments {
  id          BigInt    @id @default(autoincrement())
  story_id    BigInt
  title       String    @db.VarChar(255)
  description String?
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  stories     stories   @relation(fields: [story_id], references: [id], onDelete: Cascade, map: "treatments_story_id_foreign")
}

model users {
  id                BigInt    @id @default(autoincrement())
  role_id           BigInt    @default(3)
  name              String    @db.VarChar(255)
  email             String    @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime? @db.Timestamp(0)
  password          String    @default("12345678") @db.VarChar(255)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
  roles             roles     @relation(fields: [role_id], references: [id], map: "users_role_id_foreign")
}
